require File.expand_path('../../lib/githubify', __FILE__)

describe Githubifier do
  describe "#initialize" do
    it "should take a github user, a github project and a changelog" do
      g = Githubifier.new('gregbell', 'activeadmin', 'ChangeLog')
      g.user.should == 'gregbell'
      g.project.should == 'activeadmin'
      g.changelog.should == 'ChangeLog'
    end
  end

  describe "#better_changelog" do
    let(:user) { 'gregbell' }
    let(:project) { 'activeadmin' }

    let(:better_changelog) { Githubifier.new(user, project, changelog).better_changelog }

    subject { better_changelog }

    context "when the changelog does not contain any reference to issues or users" do
      let(:changelog) { 'ChangeLog' }

      it "should return the original changelog" do
        better_changelog.should == changelog
      end
    end

    context "when the changelog contains an issue number" do
      let(:changelog) { 'Pull Request #123: Add I18n.' }

      it "should wrap the issue number to make a link" do
        better_changelog.should include("[#123][]")
      end

      it "should append the link definition at the end of the changelog" do
        better_changelog.split("\n").last.should == "[#123]: https://github.com/gregbell/activeadmin/issues/123"
      end
    end

    context "when the changelog contains a contributor" do
      let(:changelog) { 'New feature by @pcreux' }

      it "should wrap the issue number to make a link" do
        better_changelog.should include("[@pcreux][]")
      end

      it "should append the link definition at the end of the changelog" do
        better_changelog.split("\n").last.should == "[@pcreux]: https://github.com/pcreux"
      end
    end

    context "when the changelog contains issue numbers or contributors which are links" do
      let(:changelog) { '[@pcreux][] closes [#123][]' }

      it "should leave them alone" do
        better_changelog.should include("[@pcreux][] closes [#123][]")
      end
    end

    context "when the changelog already contains issue numbers, link definitions and custom links" do
      let(:changelog) { <<-EOS
# New entry
You know what? @pcreux closed issue #300!

# Previous entries
You know what? [@pcreux][] closed issue [#123][].
And this is my link, don't touch it: [Adequate][http://adequatehq.com]

<!--- The following link definitions are generated by PimpMyChangelog --->
[#123]: https://github.com/gregbell/activeadmin/issues/123
[@pcreux]: https://github.com/pcreux
EOS
      }

      let(:better_changelog) { Githubifier.new('gregbell', 'activeadmin', changelog).better_changelog }

      it "should regenerate the link definition but leave the existing links alone" do
        (better_changelog + "\n").should == <<-EOS
# New entry
You know what? [@pcreux][] closed issue [#300][]!

# Previous entries
You know what? [@pcreux][] closed issue [#123][].
And this is my link, don't touch it: [Adequate][http://adequatehq.com]

<!--- The following link definitions are generated by PimpMyChangelog --->
[#123]: https://github.com/gregbell/activeadmin/issues/123
[#300]: https://github.com/gregbell/activeadmin/issues/300
[@pcreux]: https://github.com/pcreux
EOS
      end
    end
  end

end

describe ChangeLogParser do

  describe "#initialize" do
    it "should take a changelog" do
      p = ChangeLogParser.new('CHANGELOG')
      p.changelog.should == 'CHANGELOG'
    end
  end

  describe "#content" do
    context "when the changelog has link definitions" do
      let(:changelog) { <<-EOS
# My Awesome ChangeLog

This my awesome changelog.

<!--- The following link definitions are generated by PimpMyChangelog --->
#123: https://whatever
@pcreux: https://github.com/pcreux
EOS
      }

      it "should return the ChangeLog without the link definitions" do
        ChangeLogParser.new(changelog).content.should == <<-EOS
# My Awesome ChangeLog

This my awesome changelog.

EOS
      end
    end # context "when the changelog has link definitions"

    context "when the changelog does not have link definitions" do
      let(:changelog) { <<-EOS
# My Awesome ChangeLog

This my awesome changelog.
EOS
      }

      it "should return the ChangeLog without the link definitions" do
        ChangeLogParser.new(changelog).content.should == changelog
      end
    end # context "when the changelog has link definitions"
  end # describe "#content"

  describe "#issues" do
    it "should return a sorted list of unique issue numbers" do
      ChangeLogParser.new("#20 #100 #300 #20").issues.should == ['20', '100', '300']
    end
  end

  describe "#contributors" do
    it "should return a sorted list of unique contributors" do
      ChangeLogParser.new("@samvincent @pcreux @gregbell @pcreux").contributors.
        should == ['gregbell', 'pcreux', 'samvincent']
    end
  end
end
